{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"","sourcesContent":["import {obs} from 'clan-fp'\n\nconst parse = (_q, i) => {\n    const [query, fragments] = removeFragments(_q)\n    \t, name = /^\\s*(query|mutation)\\s*(\\w+)\\s*(\\([^)]+\\))?\\s*/ig\n    \t, ws = /\\s+/ig\n    \t, comment = /(#|\\/\\/)(.*)$/igm\n    \t, q = query.replace(comment, '').replace(name, '').replace(ws, ' ').trim()\n    \t, sig = name.exec(query.trim())\n    \t, unwrapped = q.slice(1, q.lastIndexOf('}')).trim()\n\n    if(sig && sig[1] === 'mutation')\n        throw 'Mutations cannot be batched, and must be submitted as a regular GraphQL request'\n\n    if(sig){\n    \tlet [s, type, name, args] = sig\n        return {\n            args: parseArgs(args)\n            , query: parseSelections(unwrapped)\n            , fragments\n        }\n    } else {\n        return { query: parseSelections(unwrapped), fragments }\n    }\n}\n\nconst removeFragments = query => {\n\tlet r\n\t\t, fragments = []\n\n\twhile((r = /\\bfragment\\b/ig.exec(query))) {\n\n\t\tlet start = r.index\n\t\t\t, end = start\n\t\t\t, matched = false\n\t\t\t, stack = 0\n\n\t\twhile(start < query.length && !matched){\n\t\t\tend++\n\t\t\tquery[end] === '{' && ++stack\n\t\t\tquery[end] === '}' && --stack === 0 && (matched = true)\n\t\t}\n\n\t\tif(matched){\n\t\t\tlet f = query.slice(start, end+1)\n\t\t\tfragments.push(f)\n\t\t\tquery = query.replace(f, '')\n\t\t}\n\t}\n\n\treturn [query, fragments.join('\\n\\n')]\n}\n\nconst parseArgs = args => {\n\treturn args\n    \t.slice(1, args.length-1)\n        .replace(/\\s+/, '')\n    \t.split(',')\n        .map(kvp => {\n        \tlet [name,type] = kvp.split(':')\n            return {name, type}\n        })\n}\n\nconst getNextBracketPairing = ss => {\n    let parens = /\\([^:]+:[^)]+\\)/ig.exec(ss)\n    \t, args = parens && parens.index < ss.indexOf('{') ? parens : ''\n        , selection = args ? ss.replace(args[0], '') : ss\n    \t, start = selection.indexOf('{')\n    \t, end = start+1\n    \t, matched = false\n    \t, nested = 0\n\n    while(!matched && end < selection.length){\n        ++end\n        let c = selection[end]\n        if(c === '{') ++nested\n        else if(c === '}') {\n            if(nested > 0) --nested\n            else matched = true\n        }\n    }\n\n    let sig = selection.slice(0, start).trim()\n    \t, colon = sig.indexOf(':')\n        , ref = colon !== -1\n    \t\t? sig.slice(0, colon)\n            : sig\n    \t, name = colon !== -1\n    \t\t? sig.slice(colon+1)\n    \t\t: sig\n        , result = [\n            {\n                ref\n                , args: args && args[0]\n                , body: selection.slice(start, end+1).trim()\n                , name: name.trim()\n            }\n            , selection.slice(end+1).trim()\n        ]\n\n    return result\n}\n\nconst parseSelections = (selections) => {\n    let r = []\n    while(selections.length !== 0){\n        let [selection, next] = getNextBracketPairing(selections)\n        selections = next\n        r.push(selection)\n    }\n    return r\n}\n\nconst batch = q => {\n    let r =\n        q\n        .map(parse)\n    \t.reduce((acc,x,i) => {\n    \t\tlet rmap = {}\n    \t\tx.fragments && (acc.fragments += '\\n\\n'+x.fragments)\n            x.args && x.args.map(({name,type}) => {\n\t\t\t\tacc.args = `${name}:${type}`\n            })\n            x.query.map(({ref,args,body,name}) => {\n            \trmap[ref+i] = ref\n                acc.query += `\\n\\t${ref}${i}: ${name}${args || ''} ${body}\\n`\n            })\n            acc.rmaps.push(rmap)\n            return acc\n        }, {query:'', args:'', fragments:'', rmaps:[]})\n\n    let batchedQuery = `${r.fragments}\\n\\nquery batchedQuery ${r.args ? `(${r.args})` : ''} {\\n${r.query}\\n}`\n    return {q:batchedQuery, rmaps: r.rmaps}\n}\n\nexport const f = (url, query, args) =>\n\tfetch(\n\t\turl\n\t\t, { method: 'POST', body: JSON.stringify({ query, variables: args }) })\n\t.then(r => r.json())\n\nexport const mux = (getter, wait=60, max_buffer=8) => {\n\tconst queries = obs() // source queries\n\t\t, callbacks = obs() // source callbacks\n\t\t, cbs = callbacks // sink callbacks\n\t\t\t.reduce((acc,x) => x === false ? [] : acc.concat([x]), [])\n\t\t, payload = queries // sink queries\n\t\t\t.reduce((acc, val) => val === false ? [] : acc.concat([val]), [])\n\t\t, append = ({ query='', args={} }) => {\n\t\t\t// console.log(tag`${query}`)\n\t\t\tqueries({query, args}) // append new query\n\t\t\treturn payload().length - 1\n\t\t}\n\t\t, parseQueryReg = q => {\n\t\t\tlet t = /(\\{|[^{])/.exec(q)\n\t\t\tif(t && t[0] === '{')\n\t\t\t\treturn q.slice(q.indexOf('{')+1, q.lastIndexOf('}'))\n\n\t\t\treturn q\n\t\t}\n\t\t, send = debounce(\n\t\t\t$ => {\n\t\t\t\tlet q = payload()\n\t\t\t\t\t, c = cbs()\n\n\t\t\t\tcallbacks(false) // reset callbacks\n\t\t\t\tqueries(false) // reset query data\n\n\t\t\t\tlet {q:query, rmaps} = batch(q.map(x => x.query))\n\t\t\t\t\t, args = q.reduce((acc,x) => Object.assign(acc, x.args), {})\n\n\t\t\t\tgetter(query, args)\n\t\t\t\t\t.then(data => {\n\t\t\t\t\t\tif(data.errors)\n\t\t\t\t\t\t\treturn console.error(data.errors)\n\n\t\t\t\t\t\trmaps\n\t\t\t\t\t\t.map((rmap,i) => {\n\t\t\t\t\t\t\tlet d = Object.keys(rmap)\n\t\t\t\t\t\t\t\t.reduce((acc,key) => {\n\t\t\t\t\t\t\t\t\t// rmap[user0] -> user\n\t\t\t\t\t\t\t\t\t// { user: ... } <-- { user0: {...} }\n\t\t\t\t\t\t\t\t\tacc[rmap[key]] = data.data[key]\n\t\t\t\t\t\t\t\t\treturn acc\n\t\t\t\t\t\t\t\t}, {})\n\n\t\t\t\t\t\t\tc[i]({data:d}) // pipe demuxed data back into callbacks\n\t\t\t\t\t\t})\n\t\t\t\t\t})\n\t\t\t}\n\t\t\t, wait)\n\t\t, queue = cb => {\n\t\t\tcallbacks(cb) // append callback\n\t\t\tsend() // send will execute once every 60ms\n\t\t}\n\n\treturn (query, args) => {\n\t\tlet index = append({query, args})\n\t\treturn new Promise(res =>\n\t\t\tqueue(d => res(d)))\n\t}\n}\n\nexport default mux"]}